plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "com.google.protobuf" version "0.8.12"
    id "kotlin-parcelize"
}

android {
    compileSdk 30

    defaultConfig {
        applicationId "top.mcwebsite.novel"
        minSdk 23
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
            }

        }
    }

}

/**
 * 注意配置 protoc 命令，分为不同的版本，版本不同配置的方式不同，
 * 网上大部分都是 3.0.x ~ 3.7.x 的配置方式，关于这种配置方法，可以查看 [protobuf-gradle-plugin](https://github.com/google/protobuf-gradle-plugin)  文档，这里不在演示了，也不建议使用
 * 在此项目中使用的是 3.8 以后 的配置的配置，
 */
protobuf {
    // 设置 protoc 的版本
    protoc {
        // //从仓库下载 protoc 这里的版本号需要与依赖 com.google.protobuf:protobuf-javalite:xxx 版本相同
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }


    // 默认生成目录 $buildDir/generated/source/proto 通过 generatedFilesBaseDir 改变生成位置
    generatedFilesBaseDir = "$projectDir/src/main"
}

dependencies {
    implementation project(":common")

    implementation libs.kotlin.stdlib
    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.androidx.fragment
    implementation libs.android.material
    implementation libs.androidx.constraintLayout
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.datasource
    implementation libs.androidx.swiperefresh
    implementation libs.koin.core
    implementation libs.koin.android
    implementation libs.koin.androidCompat
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.coil
    implementation libs.protobuf.javalite
    implementation libs.retrofit.retrofit
    implementation libs.retrofit.convert.scalars
    implementation libs.retrofit.convert.moshi
    implementation libs.jsoup
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.core
}